{"version":3,"sources":["../src/compareImage.js"],"names":["saveDiff","diff","diffPath","Promise","resolve","reject","cb","error","obj","image","write","cleanUpImages","images","forEach","fs","unlinkSync","e","compareImage","capturedImage","globalConfig","testConfig","prefixedLogger","logger","prefix","testName","snapshotsDir","imageSnapshotPathProvided","path","imageSnapshotPath","snapshotPath","diffDir","currentImageDir","currentImagePath","existsSync","isUpdate","snapshotImage","Jimp","read","trace","matched","testImage","log","distance","mismatchThreshold","percent","diffPercent","saveCurrentImage","mkdirSync","writeFileSync","saveDifferencifiedImage","updated","added"],"mappings":"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","file":"compareImage.js","sourcesContent":["import Jimp from 'jimp';\r\nimport path from 'path';\r\nimport fs from 'fs';\r\n\r\nimport logger from './utils/logger';\r\nimport {\r\n  getSnapshotsDir,\r\n  getSnapshotPath,\r\n  getDiffDir,\r\n  getDiffPath,\r\n  getCurrentImageDir,\r\n  getCurrentImagePath,\r\n} from './utils/paths';\r\n\r\nconst saveDiff = (diff, diffPath) => new Promise((resolve, reject) => {\r\n  const cb = (error, obj) => {\r\n    if (error) {\r\n      reject(error);\r\n    }\r\n    resolve(obj);\r\n  };\r\n  diff.image.write(diffPath, cb);\r\n});\r\n\r\nconst cleanUpImages = (images) => {\r\n  images.forEach((image) => {\r\n    try {\r\n      fs.unlinkSync(image);\r\n    } catch (e) {\r\n      // ignore error as left over image may not exist\r\n    }\r\n  });\r\n};\r\n\r\nconst compareImage = async (capturedImage, globalConfig, testConfig) => {\r\n  const prefixedLogger = logger.prefix(testConfig.testName);\r\n  const snapshotsDir = globalConfig.imageSnapshotPathProvided\r\n    ? path.resolve(globalConfig.imageSnapshotPath)\r\n    : getSnapshotsDir(testConfig, globalConfig);\r\n\r\n  const snapshotPath = getSnapshotPath(snapshotsDir, testConfig);\r\n\r\n  const diffDir = getDiffDir(snapshotsDir);\r\n  const diffPath = getDiffPath(diffDir, testConfig);\r\n\r\n  const currentImageDir = getCurrentImageDir(snapshotsDir);\r\n  const currentImagePath = getCurrentImagePath(currentImageDir, testConfig);\r\n\r\n  cleanUpImages([diffPath, currentImagePath]);\r\n\r\n  if (fs.existsSync(snapshotPath) && !testConfig.isUpdate) {\r\n    let snapshotImage;\r\n    try {\r\n      snapshotImage = await Jimp.read(snapshotPath);\r\n    } catch (error) {\r\n      prefixedLogger.error(`failed to read reference image: ${snapshotPath}`);\r\n      prefixedLogger.trace(error);\r\n      return { error: 'failed to read reference image', matched: false };\r\n    }\r\n    let testImage;\r\n    try {\r\n      testImage = await Jimp.read(capturedImage);\r\n    } catch (error) {\r\n      prefixedLogger.error('failed to read current screenshot image');\r\n      prefixedLogger.trace(error);\r\n      return { error: 'failed to read current screenshot image', matched: false };\r\n    }\r\n    prefixedLogger.log('comparing...');\r\n    const distance = Jimp.distance(snapshotImage, testImage);\r\n    const diff = Jimp.diff(snapshotImage, testImage, globalConfig.mismatchThreshold);\r\n    if (distance <= globalConfig.mismatchThreshold && diff.percent <= globalConfig.mismatchThreshold) {\r\n      prefixedLogger.log('no mismatch found ✅');\r\n      return {\r\n        snapshotPath, distance, diffPercent: diff.percent, matched: true,\r\n      };\r\n    }\r\n    if (globalConfig.saveCurrentImage) {\r\n      try {\r\n        if (!fs.existsSync(currentImageDir)) {\r\n          fs.mkdirSync(currentImageDir);\r\n        }\r\n        if (fs.existsSync(currentImagePath)) {\r\n          fs.unlinkSync(currentImagePath);\r\n        }\r\n        fs.writeFileSync(currentImagePath, capturedImage);\r\n      } catch (error) {\r\n        prefixedLogger.error(`failed to save the current image: ${currentImagePath}`);\r\n        prefixedLogger.trace(error);\r\n      }\r\n    }\r\n    if (globalConfig.saveDifferencifiedImage) {\r\n      try {\r\n        if (!fs.existsSync(diffDir)) {\r\n          fs.mkdirSync(diffDir);\r\n        }\r\n        if (fs.existsSync(diffPath)) {\r\n          fs.unlinkSync(diffPath);\r\n        }\r\n        await saveDiff(diff, diffPath);\r\n        prefixedLogger.log(`saved the diff image to disk at ${diffPath}`);\r\n      } catch (error) {\r\n        prefixedLogger.error(`failed to save the diff image: ${diffPath}`);\r\n        prefixedLogger.trace(error);\r\n      }\r\n    }\r\n\r\n    prefixedLogger.error(`mismatch found❗\r\n      Result:\r\n        distance: ${distance}\r\n        diff: ${diff.percent}\r\n        misMatchThreshold: ${globalConfig.mismatchThreshold}\r\n    `);\r\n    return {\r\n      snapshotPath, distance, diffPercent: diff.percent, diffPath, matched: false,\r\n    };\r\n  }\r\n  prefixedLogger.log(`screenshot saved in -> ${snapshotPath}`);\r\n  if (fs.existsSync(diffPath)) {\r\n    fs.unlinkSync(diffPath);\r\n  }\r\n  if (!fs.existsSync(snapshotsDir)) {\r\n    fs.mkdirSync(snapshotsDir);\r\n  }\r\n  fs.writeFileSync(snapshotPath, capturedImage);\r\n  return testConfig.isUpdate ? { updated: true } : { added: true };\r\n};\r\n\r\nexport default compareImage;\r\n"]}