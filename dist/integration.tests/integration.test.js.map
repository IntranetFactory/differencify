{"version":3,"sources":["../../src/integration.tests/integration.test.js"],"names":["differencify","Differencify","debug","describe","beforeAll","launchBrowser","args","afterAll","cleanup","it","init","newPage","setViewport","width","height","goto","waitFor","screenshot","toMatchSnapshot","close","end","target","chain","page","image","result","expect","toEqual","launch","title","resultDetail","testConfig","imageType","isJest","isUpdate","testId","testName","testNameProvided","testPath","testResult","diffPercent","distance","matched","snapshotPath","undefined","newWindow","tracing","start","path","keyboard","press","stop","on","msg","i","length","evaluate","console","log","dialog","message","dismiss","alert","mainFrame","then","url","image2","result2","customDifferencify","imageSnapshotPath","freezeImage","mockRequests","process","env","CI","replaceImage"],"mappings":"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","file":"integration.test.js","sourcesContent":["import Differencify from '../index';\r\n\r\nconst differencify = new Differencify({ debug: true });\r\n\r\ndescribe('Differencify', () => {\r\n  beforeAll(async () => {\r\n    await differencify.launchBrowser({ args: ['--no-sandbox', '--disable-setuid-sandbox'] });\r\n  });\r\n  afterAll(async () => {\r\n    await differencify.cleanup();\r\n  });\r\n  it('simple', async () => {\r\n    await differencify\r\n      .init()\r\n      .newPage()\r\n      .setViewport({ width: 1600, height: 1200 })\r\n      .goto('http://example.com/')\r\n      .waitFor(1000)\r\n      .screenshot()\r\n      .toMatchSnapshot()\r\n      .close()\r\n      .end();\r\n  }, 30000);\r\n  it('simple unchained', async () => {\r\n    const target = differencify.init({ chain: false });\r\n    const page = await target.newPage();\r\n    await page.goto('http://example.com/');\r\n    await page.setViewport({ width: 1600, height: 1200 });\r\n    await page.waitFor(1000);\r\n    const image = await page.screenshot();\r\n    const result = await target.toMatchSnapshot(image);\r\n    await page.close();\r\n    expect(result).toEqual(true);\r\n  }, 30000);\r\n  it('Launch new browser per test', async () => {\r\n    await differencify\r\n      .init()\r\n      .launch({ args: ['--no-sandbox', '--disable-setuid-sandbox'] })\r\n      .newPage()\r\n      .setViewport({ width: 1600, height: 1200 })\r\n      .goto('http://example.com/')\r\n      .waitFor(1000)\r\n      .screenshot()\r\n      .toMatchSnapshot()\r\n      .close()\r\n      .end();\r\n  }, 30000);\r\n  it('Launch new browser per test when unchained', async () => {\r\n    const target = differencify.init({ chain: false });\r\n    await target.launch({ args: ['--no-sandbox', '--disable-setuid-sandbox'] });\r\n    const page = await target.newPage();\r\n    await page.goto('http://example.com/');\r\n    await page.setViewport({ width: 1600, height: 1200 });\r\n    await page.waitFor(1000);\r\n    const image = await page.screenshot();\r\n    const result = await target.toMatchSnapshot(image);\r\n    await page.close();\r\n    await target.close();\r\n    expect(result).toEqual(true);\r\n  }, 30000);\r\n  it('Using result function', async () => {\r\n    await differencify\r\n      .init()\r\n      .newPage()\r\n      .setViewport({ width: 1600, height: 1200 })\r\n      .goto('http://example.com/')\r\n      .waitFor(1000)\r\n      .title()\r\n      .result((title) => {\r\n        expect(title).toEqual('Example Domain');\r\n      })\r\n      .screenshot()\r\n      .toMatchSnapshot()\r\n      .close()\r\n      .end();\r\n  }, 30000);\r\n  it('Using toMatchSnapshot callback for result details', async () => {\r\n    await differencify\r\n      .init()\r\n      .newPage()\r\n      .setViewport({ width: 1600, height: 1200 })\r\n      .goto('http://example.com/')\r\n      .waitFor(1000)\r\n      .title()\r\n      .screenshot()\r\n      .toMatchSnapshot((resultDetail) => {\r\n        expect(resultDetail).toEqual({\r\n          testConfig: {\r\n            chain: true,\r\n            imageType: 'png',\r\n            isJest: true,\r\n            isUpdate: false,\r\n            testId: 6,\r\n            testName: 'Differencify Using toMatchSnapshot callback for result details',\r\n            testNameProvided: false,\r\n            testPath: '/differencify/src/integration.tests/integration.test.js',\r\n          },\r\n          testResult: {\r\n            diffPercent: 0,\r\n            distance: 0,\r\n            matched: true,\r\n            snapshotPath: '/differencify/src/integration.tests/__image_snapshots__/Differencify Using toMatchSnapshot callback for result details.snap.png',\r\n          },\r\n        });\r\n      })\r\n      .close()\r\n      .end();\r\n  }, 30000);\r\n  it('Using toMatchSnapshot callback for result details when unchained', async () => {\r\n    const target = differencify.init({ chain: false });\r\n    await target.launch({ args: ['--no-sandbox', '--disable-setuid-sandbox'] });\r\n    const page = await target.newPage();\r\n    await page.goto('http://example.com/');\r\n    await page.setViewport({ width: 1600, height: 1200 });\r\n    await page.waitFor(1000);\r\n    const image = await page.screenshot();\r\n    await target.toMatchSnapshot(image, (resultDetail) => {\r\n      expect(resultDetail).toEqual({\r\n        testConfig: {\r\n          chain: false,\r\n          imageType: undefined,\r\n          isJest: true,\r\n          isUpdate: false,\r\n          newWindow: true,\r\n          testId: 7,\r\n          testName: 'Differencify Using toMatchSnapshot callback for result details when unchained',\r\n          testNameProvided: false,\r\n          testPath: '/differencify/src/integration.tests/integration.test.js',\r\n        },\r\n        testResult: {\r\n          diffPercent: 0,\r\n          distance: 0,\r\n          matched: true,\r\n          snapshotPath: '/differencify/src/integration.tests/__image_snapshots__/Differencify Using toMatchSnapshot callback for result details when unchained.snap.png',\r\n        },\r\n      });\r\n    });\r\n    await page.close();\r\n    await target.close();\r\n  }, 30000);\r\n  it('Context switching when chained', async () => {\r\n    await differencify\r\n      .init()\r\n      .newPage()\r\n      .tracing\r\n      .start({ path: 'trace.json' })\r\n      .page\r\n      .setViewport({ width: 1600, height: 1200 })\r\n      .goto('http://example.com/')\r\n      .waitFor(1000)\r\n      .keyboard\r\n      .press('Space')\r\n      .tracing\r\n      .stop()\r\n      .page\r\n      .screenshot()\r\n      .toMatchSnapshot()\r\n      .close()\r\n      .end();\r\n  }, 30000);\r\n  it('Calling Puppeteer specific functions when chained: console', async () => {\r\n    await differencify\r\n      .init()\r\n      .newPage()\r\n      .on('console', (msg) => {\r\n        for (let i = 0; i < msg.args.length; i += 1) {\r\n          expect(`${msg.args[i]}`).toEqual('JSHandle:hello');\r\n        }\r\n      })\r\n      .evaluate(() => console.log('hello'))\r\n      .close()\r\n      .end();\r\n  }, 30000);\r\n  it('Calling Puppeteer specific functions when chained: dialog', async () => {\r\n    await differencify\r\n      .init()\r\n      .newPage()\r\n      .on('dialog', async (dialog) => {\r\n        expect(dialog.message()).toEqual('1');\r\n        await dialog.dismiss();\r\n      })\r\n      .evaluate(() => alert('1'))\r\n      .close()\r\n      .end();\r\n  }, 30000);\r\n  it('Continue on chained object', async () => {\r\n    await differencify\r\n      .init()\r\n      .newPage()\r\n      .goto('http://example.com/')\r\n      .mainFrame()\r\n      .then\r\n      .url()\r\n      .result((url) => {\r\n        expect(url).toEqual('http://example.com/');\r\n      })\r\n      .close()\r\n      .end();\r\n  }, 30000);\r\n  it('Multiple toMatchSnapshot on chained object', async () => {\r\n    await differencify\r\n      .init()\r\n      .newPage()\r\n      .goto('http://example.com/')\r\n      .waitFor(1000)\r\n      .screenshot()\r\n      .toMatchSnapshot()\r\n      .result((result) => {\r\n        expect(result).toEqual(true);\r\n      })\r\n      .goto('http://example.com/')\r\n      .waitFor(1000)\r\n      .screenshot()\r\n      .toMatchSnapshot()\r\n      .result((result) => {\r\n        expect(result).toEqual(true);\r\n      })\r\n      .close()\r\n      .end();\r\n  }, 30000);\r\n  it('Multiple toMatchSnapshot when unchained', async () => {\r\n    const target = differencify.init({ chain: false });\r\n    const page = await target.newPage();\r\n    await page.goto('http://example.com/');\r\n    await page.setViewport({ width: 1600, height: 1200 });\r\n    await page.waitFor(1000);\r\n    const image = await page.screenshot();\r\n    const result = await target.toMatchSnapshot(image);\r\n    await page.goto('http://example.net/');\r\n    await page.setViewport({ width: 1600, height: 1200 });\r\n    await page.waitFor(1000);\r\n    const image2 = await page.screenshot();\r\n    const result2 = await target.toMatchSnapshot(image2);\r\n    await page.close();\r\n    expect(result).toEqual(true);\r\n    expect(result2).toEqual(true);\r\n  }, 30000);\r\n  it('Custom test name', async () => {\r\n    const target = differencify.init({\r\n      testName: 'test1',\r\n      chain: false,\r\n    });\r\n    const page = await target.newPage();\r\n    await page.goto('http://example.com/');\r\n    await page.setViewport({ width: 1600, height: 1200 });\r\n    await page.waitFor(1000);\r\n    const image = await page.screenshot();\r\n    const result = await target.toMatchSnapshot(image);\r\n    await page.close();\r\n    expect(result).toEqual(true);\r\n  }, 30000);\r\n  it('Custom test path', async () => {\r\n    const customDifferencify = new Differencify({\r\n      imageSnapshotPath: './src/integration.tests/__image_snapshots__/custom_test_path',\r\n      debug: true,\r\n    });\r\n    await customDifferencify.launchBrowser({ args: ['--no-sandbox', '--disable-setuid-sandbox'] });\r\n    const target = customDifferencify.init({\r\n      chain: false,\r\n    });\r\n    const page = await target.newPage();\r\n    await page.setViewport({ width: 1600, height: 1200 });\r\n    await page.goto('http://example.com/');\r\n    await page.waitFor(1000);\r\n    const image = await page.screenshot();\r\n    const result = await target.toMatchSnapshot(image);\r\n    await page.close();\r\n    await customDifferencify.cleanup();\r\n    expect(result).toEqual(true);\r\n  }, 30000);\r\n  it('Freeze image in page', async () => {\r\n    await differencify\r\n      .init()\r\n      .newPage()\r\n      .setViewport({ width: 1600, height: 1200 })\r\n      .goto('https://i.giphy.com/media/xTiTnoUnHxVaaVNWhO/giphy.webp')\r\n      .waitFor('body > img')\r\n      .freezeImage('body > img')\r\n      .screenshot()\r\n      .toMatchSnapshot()\r\n      .close()\r\n      .end();\r\n  }, 30000);\r\n  it('simple with mock requests', async () => {\r\n    await differencify\r\n      .init()\r\n      .newPage()\r\n      .mockRequests()\r\n      .setViewport({ width: 1600, height: 1200 })\r\n      .goto('http://example.com/')\r\n      .waitFor(1000)\r\n      .screenshot()\r\n      .toMatchSnapshot()\r\n      .close()\r\n      .end();\r\n  }, 30000);\r\n  it('simple unchained with mock requests', async () => {\r\n    const target = differencify.init({ chain: false });\r\n    const page = await target.newPage();\r\n    await target.mockRequests();\r\n    await page.goto('http://example.com/');\r\n    await page.setViewport({ width: 1600, height: 1200 });\r\n    await page.waitFor(1000);\r\n    const image = await page.screenshot();\r\n    const result = await target.toMatchSnapshot(image);\r\n    await page.close();\r\n    expect(result).toEqual(true);\r\n  }, 30000);\r\n  it('simple with mock requests', async () => {\r\n    process.env.CI = 'true'; // This will simulate CI/CD environment\r\n    await differencify\r\n      .init()\r\n      .newPage()\r\n      .mockRequests()\r\n      .setViewport({ width: 1600, height: 1200 })\r\n      .goto('http://example.com/')\r\n      .waitFor(1000)\r\n      .screenshot()\r\n      .toMatchSnapshot()\r\n      .close()\r\n      .end();\r\n  }, 30000);\r\n  it('simple unchained with mock requests', async () => {\r\n    process.env.CI = 'true'; // This will simulate CI/CD environment\r\n    const target = differencify.init({ chain: false });\r\n    const page = await target.newPage();\r\n    await target.mockRequests();\r\n    await page.goto('http://example.com/');\r\n    await page.setViewport({ width: 1600, height: 1200 });\r\n    await page.waitFor(1000);\r\n    const image = await page.screenshot();\r\n    const result = await target.toMatchSnapshot(image);\r\n    await page.close();\r\n    expect(result).toEqual(true);\r\n  }, 30000);\r\n  it('mock requests and replace image', async () => {\r\n    await differencify\r\n      .init()\r\n      .newPage()\r\n      .mockRequests({ replaceImage: true })\r\n      .setViewport({ width: 1600, height: 1200 })\r\n      .goto('https://nimasoroush.github.io/differencify/')\r\n      .waitFor(1000)\r\n      .screenshot()\r\n      .toMatchSnapshot()\r\n      .close()\r\n      .end();\r\n  }, 30000);\r\n  it('mock requests and replace image', async () => {\r\n    process.env.CI = 'true'; // This will simulate CI/CD environment\r\n    await differencify\r\n      .init()\r\n      .newPage()\r\n      .mockRequests({ replaceImage: true })\r\n      .setViewport({ width: 1600, height: 1200 })\r\n      .goto('https://nimasoroush.github.io/differencify/')\r\n      .waitFor(1000)\r\n      .screenshot()\r\n      .toMatchSnapshot()\r\n      .close()\r\n      .end();\r\n  }, 30000);\r\n});\r\n"]}