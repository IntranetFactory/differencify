{"version":3,"sources":["../src/index.js"],"names":["Differencify","constructor","conf","debug","logger","enable","configuration","browser","testId","launchBrowser","options","log","puppeteer","launch","error","trace","executablePath","chromeExecutablePath","connectBrowser","connect","init","config","testConfig","isUpdate","warn","target","Target","isJest","chainedTarget","chain","cleanup","close","module","exports"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;AACA;;;;AACA;;;;;;AAEe,MAAMA,YAAN,CAAmB;AAChCC,cAAYC,IAAZ,EAAkB;AAChB,QAAIA,QAAQA,KAAKC,KAAL,KAAe,IAA3B,EAAiC;AAC/BC,uBAAOC,MAAP;AACD;AACD,SAAKC,aAAL,GAAqB,4CAA4BJ,IAA5B,CAArB;AACA,SAAKK,OAAL,GAAe,IAAf;AACA,SAAKC,MAAL,GAAc,CAAd;AACD;;AAED,QAAMC,aAAN,CAAoBC,OAApB,EAA6B;AAC3B,QAAI,CAAC,KAAKH,OAAV,EAAmB;AACjBH,uBAAOO,GAAP,CAAW,sBAAX;AACA,UAAI;AACF,aAAKJ,OAAL,GAAe,MAAMK,oBAAUC,MAAV,CAAiBH,OAAjB,CAArB;AACD,OAFD,CAEE,OAAOI,KAAP,EAAc;AACdV,yBAAOW,KAAP,CAAaD,KAAb;AACD;AACF,KAPD,MAOO;AACLV,uBAAOO,GAAP,CAAW,iCAAX;AACD;AACF;;AAED,SAAOK,cAAP,GAAwB;AACtB,WAAOJ,oBAAUI,cAAV,EAAP;AACD;;AAED,SAAOC,oBAAP,GAA8B;AAC5B,WAAOL,oBAAUI,cAAV,EAAP;AACD;;AAED,QAAMH,MAAN,CAAaH,OAAb,EAAsB;AACpB,SAAKD,aAAL,CAAmBC,OAAnB;AACD;;AAED,QAAMQ,cAAN,CAAqBR,OAArB,EAA8B;AAC5B,QAAI,CAAC,KAAKH,OAAV,EAAmB;AACjBH,uBAAOO,GAAP,CAAW,sBAAX;AACA,UAAI;AACF,aAAKJ,OAAL,GAAe,MAAMK,oBAAUO,OAAV,CAAkBT,OAAlB,CAArB;AACD,OAFD,CAEE,OAAOI,KAAP,EAAc;AACdV,yBAAOW,KAAP,CAAaD,KAAb;AACD;AACF,KAPD,MAOO;AACLV,uBAAOO,GAAP,CAAW,iCAAX;AACD;AACF;;AAED,QAAMQ,OAAN,CAAcT,OAAd,EAAuB;AACrB,SAAKQ,cAAL,CAAoBR,OAApB;AACD;;AAEDU,OAAKC,MAAL,EAAa;AACX,SAAKb,MAAL,IAAe,CAAf;AACA,UAAMc,aAAa,0CAA0BD,MAA1B,EAAkC,KAAKb,MAAvC,CAAnB;AACA,QAAIc,WAAWC,QAAf,EAAyB;AACvBnB,uBAAOoB,IAAP,CAAY,yEAAZ;AACD;AACD,UAAMC,SAAS,IAAIC,gBAAJ,CAAW,KAAKnB,OAAhB,EAAyB,KAAKD,aAA9B,EAA6CgB,UAA7C,CAAf;AACAG,WAAOE,MAAP;AACA,UAAMC,gBAAgB,0BAAMH,MAAN,EAAcH,WAAWO,KAAzB,CAAtB;AACAJ,WAAOG,aAAP,GAAuBA,aAAvB;AACA,WAAOA,aAAP;AACD;;AAED,QAAME,OAAN,GAAgB;AACd1B,qBAAOO,GAAP,CAAW,oBAAX;AACA,QAAI;AACF,UAAI,KAAKJ,OAAT,EAAkB;AAChB,cAAM,KAAKA,OAAL,CAAawB,KAAb,EAAN;AACD;AACF,KAJD,CAIE,OAAOjB,KAAP,EAAc;AACdV,uBAAOW,KAAP,CAAaD,KAAb;AACD;AACF;AA1E+B;;kBAAbd,Y;AA6ErBgC,OAAOC,OAAP,GAAiBjC,YAAjB","file":"index.js","sourcesContent":["import puppeteer from 'puppeteer';\r\nimport chain from './helpers/proxyChain';\r\nimport { sanitiseGlobalConfiguration, sanitiseTestConfiguration } from './sanitiser';\r\nimport Target from './target';\r\nimport logger from './utils/logger';\r\n\r\nexport default class Differencify {\r\n  constructor(conf) {\r\n    if (conf && conf.debug === true) {\r\n      logger.enable();\r\n    }\r\n    this.configuration = sanitiseGlobalConfiguration(conf);\r\n    this.browser = null;\r\n    this.testId = 0;\r\n  }\r\n\r\n  async launchBrowser(options) {\r\n    if (!this.browser) {\r\n      logger.log('Launching browser...');\r\n      try {\r\n        this.browser = await puppeteer.launch(options);\r\n      } catch (error) {\r\n        logger.trace(error);\r\n      }\r\n    } else {\r\n      logger.log('Using existing browser instance');\r\n    }\r\n  }\r\n\r\n  static executablePath() {\r\n    return puppeteer.executablePath();\r\n  }\r\n\r\n  static chromeExecutablePath() {\r\n    return puppeteer.executablePath();\r\n  }\r\n\r\n  async launch(options) {\r\n    this.launchBrowser(options);\r\n  }\r\n\r\n  async connectBrowser(options) {\r\n    if (!this.browser) {\r\n      logger.log('Launching browser...');\r\n      try {\r\n        this.browser = await puppeteer.connect(options);\r\n      } catch (error) {\r\n        logger.trace(error);\r\n      }\r\n    } else {\r\n      logger.log('Using existing browser instance');\r\n    }\r\n  }\r\n\r\n  async connect(options) {\r\n    this.connectBrowser(options);\r\n  }\r\n\r\n  init(config) {\r\n    this.testId += 1;\r\n    const testConfig = sanitiseTestConfiguration(config, this.testId);\r\n    if (testConfig.isUpdate) {\r\n      logger.warn('Your tests are running on update mode. Test screenshots will be updated');\r\n    }\r\n    const target = new Target(this.browser, this.configuration, testConfig);\r\n    target.isJest();\r\n    const chainedTarget = chain(target, testConfig.chain);\r\n    target.chainedTarget = chainedTarget;\r\n    return chainedTarget;\r\n  }\r\n\r\n  async cleanup() {\r\n    logger.log('Closing browser...');\r\n    try {\r\n      if (this.browser) {\r\n        await this.browser.close();\r\n      }\r\n    } catch (error) {\r\n      logger.trace(error);\r\n    }\r\n  }\r\n}\r\n\r\nmodule.exports = Differencify;\r\n"]}