{"version":3,"sources":["../../src/utils/paths.js"],"names":["getTestRoot","testConfig","globalConfig","testRoot","isJest","path","dirname","testPath","resolve","pkgDir","sync","imageSnapshotPath","fs","existsSync","mkdirSync","getSanitizedName","name","replace","getSnapshotsDir","join","getDiffDir","snapshotsDir","getSnapshotPath","Error","testName","imageType","getDiffPath","diffDir","getCurrentImageDir","getCurrentImagePath","currentImageDir"],"mappings":";;;;;;;AAAA;;;;AACA;;;;AACA;;;;;;AAEA,MAAMA,cAAc,CAACC,UAAD,EAAaC,YAAb,KAA8B;AAChD,MAAIC,QAAJ;AACA,MAAIF,WAAWG,MAAf,EAAuB;AACrBD,eAAWE,eAAKC,OAAL,CAAaL,WAAWM,QAAxB,CAAX;AACD,GAFD,MAEO;AACLJ,eAAWE,eAAKG,OAAL,CAAaC,iBAAOC,IAAP,EAAb,EAA4BR,aAAaS,iBAAzC,CAAX;AACD;AACD,MAAI,CAACC,aAAGC,UAAH,CAAcV,QAAd,CAAL,EAA8B;AAC5BS,iBAAGE,SAAH,CAAaX,QAAb;AACD;AACD,SAAOA,QAAP;AACD,CAXD;;AAaA,MAAMY,mBAAmBC,QAAQA,KAAKC,OAAL,CAAa,KAAb,EAAoB,GAApB,CAAjC;;AAEO,MAAMC,4CAAkB,CAACjB,UAAD,EAAaC,YAAb,KAA8BG,eAAKc,IAAL,CAC3DnB,YAAYC,UAAZ,EAAwBC,YAAxB,CAD2D,EAE3D,qBAF2D,CAAtD;;AAKA,MAAMkB,kCAAaC,gBAAgBhB,eAAKc,IAAL,CAAUE,YAAV,EAAwB,2BAAxB,CAAnC;;AAEA,MAAMC,4CAAkB,CAACD,YAAD,EAAepB,UAAf,KAA8B;AAC3D,MAAI,CAACoB,YAAD,IAAiB,CAACpB,UAAtB,EAAkC;AAChC,UAAM,IAAIsB,KAAJ,CAAU,+CAAV,CAAN;AACD;AACD,QAAMC,WAAWT,iBAAiBd,WAAWuB,QAA5B,CAAjB;AACA,SAAOnB,eAAKc,IAAL,CAAUE,YAAV,EAAyB,GAAEG,QAAS,IAAGvB,WAAWwB,SAAX,IAAwB,KAAM,EAArE,CAAP;AACD,CANM;;AAQA,MAAMC,oCAAc,CAACC,OAAD,EAAU1B,UAAV,KAAyB;AAClD,MAAI,CAAC0B,OAAD,IAAY,CAAC1B,UAAjB,EAA6B;AAC3B,UAAM,IAAIsB,KAAJ,CAAU,2CAAV,CAAN;AACD;AACD,QAAMC,WAAWT,iBAAiBd,WAAWuB,QAA5B,CAAjB;AACA,SAAOnB,eAAKc,IAAL,CAAUQ,OAAV,EAAoB,GAAEH,QAAS,IAAGvB,WAAWwB,SAAX,IAAwB,KAAM,EAAhE,CAAP;AACD,CANM;;AAQA,MAAMG,kDAAqBP,gBAAgBhB,eAAKc,IAAL,CAAUE,YAAV,EAAwB,oBAAxB,CAA3C;;AAEA,MAAMQ,oDAAsB,CAACC,eAAD,EAAkB7B,UAAlB,KAAiC;AAClE,MAAI,CAAC6B,eAAD,IAAoB,CAAC7B,UAAzB,EAAqC;AACnC,UAAM,IAAIsB,KAAJ,CAAU,2CAAV,CAAN;AACD;AACD,QAAMC,WAAWT,iBAAiBd,WAAWuB,QAA5B,CAAjB;AACA,SAAOnB,eAAKc,IAAL,CAAUW,eAAV,EAA4B,GAAEN,QAAS,IAAGvB,WAAWwB,SAAX,IAAwB,KAAM,EAAxE,CAAP;AACD,CANM","file":"paths.js","sourcesContent":["import path from 'path';\r\nimport pkgDir from 'pkg-dir';\r\nimport fs from 'fs';\r\n\r\nconst getTestRoot = (testConfig, globalConfig) => {\r\n  let testRoot;\r\n  if (testConfig.isJest) {\r\n    testRoot = path.dirname(testConfig.testPath);\r\n  } else {\r\n    testRoot = path.resolve(pkgDir.sync(), globalConfig.imageSnapshotPath);\r\n  }\r\n  if (!fs.existsSync(testRoot)) {\r\n    fs.mkdirSync(testRoot);\r\n  }\r\n  return testRoot;\r\n};\r\n\r\nconst getSanitizedName = name => name.replace(/\\//g, '-');\r\n\r\nexport const getSnapshotsDir = (testConfig, globalConfig) => path.join(\r\n  getTestRoot(testConfig, globalConfig),\r\n  '__image_snapshots__',\r\n);\r\n\r\nexport const getDiffDir = snapshotsDir => path.join(snapshotsDir, '__differencified_output__');\r\n\r\nexport const getSnapshotPath = (snapshotsDir, testConfig) => {\r\n  if (!snapshotsDir || !testConfig) {\r\n    throw new Error('Incorrect arguments passed to getSnapshotPath');\r\n  }\r\n  const testName = getSanitizedName(testConfig.testName);\r\n  return path.join(snapshotsDir, `${testName}.${testConfig.imageType || 'png'}`);\r\n};\r\n\r\nexport const getDiffPath = (diffDir, testConfig) => {\r\n  if (!diffDir || !testConfig) {\r\n    throw new Error('Incorrect arguments passed to getDiffPath');\r\n  }\r\n  const testName = getSanitizedName(testConfig.testName);\r\n  return path.join(diffDir, `${testName}.${testConfig.imageType || 'png'}`);\r\n};\r\n\r\nexport const getCurrentImageDir = snapshotsDir => path.join(snapshotsDir, '__current_output__');\r\n\r\nexport const getCurrentImagePath = (currentImageDir, testConfig) => {\r\n  if (!currentImageDir || !testConfig) {\r\n    throw new Error('Incorrect arguments passed to getDiffPath');\r\n  }\r\n  const testName = getSanitizedName(testConfig.testName);\r\n  return path.join(currentImageDir, `${testName}.${testConfig.imageType || 'png'}`);\r\n};\r\n"]}