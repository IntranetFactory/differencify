{"version":3,"sources":["../../src/utils/jestMatchers.js"],"names":["toMatchImageSnapshot","result","testState","snapshotState","expect","setState","_counters","set","currentTestName","get","pass","updated","added","matched","unmatched","message","chalk","bold","red","diffPath","toNotError","error"],"mappings":";;;;;;AAAA;;;;;;AAEA,MAAMA,uBAAuB,CAACC,MAAD,EAASC,SAAT,KAAuB;AAClD,QAAMC,gBAAgBD,SAAtB;AACAE,SAAOC,QAAP,CAAgBF,aAAhB,EAA+B;AAC7BG,eAAWH,cAAcA,aAAd,CAA4BG,SAA5B,CAAsCC,GAAtC,CACTJ,cAAcK,eADL,EAET,CAACL,cAAcA,aAAd,CAA4BG,SAA5B,CAAsCG,GAAtC,CAA0CN,cAAcK,eAAxD,KAA4E,CAA7E,IAAkF,CAFzE;AADkB,GAA/B;AAMA,MAAIE,OAAO,IAAX;AACA,MAAIT,OAAOU,OAAX,EAAoB;AAClBP,WAAOC,QAAP,CAAgBF,aAAhB,EAA+B,EAAEQ,SAASR,cAAcA,aAAd,CAA4BQ,OAA5B,IAAuC,CAAlD,EAA/B;AACD,GAFD,MAEO,IAAIV,OAAOW,KAAX,EAAkB;AACvBR,WAAOC,QAAP,CAAgBF,aAAhB,EAA+B,EAAES,OAAOT,cAAcA,aAAd,CAA4BS,KAA5B,IAAqC,CAA9C,EAA/B;AACD,GAFM,MAEA,IAAIX,OAAOY,OAAX,EAAoB;AACzBT,WAAOC,QAAP,CAAgBF,aAAhB,EAA+B,EAAEU,SAASV,cAAcA,aAAd,CAA4BU,OAA5B,IAAuC,CAAlD,EAA/B;AACD,GAFM,MAEA,IAAI,CAACZ,OAAOY,OAAZ,EAAqB;AAC1BT,WAAOC,QAAP,CAAgBF,aAAhB,EAA+B,EAAEW,WAAWX,cAAcA,aAAd,CAA4BW,SAA5B,IAAyC,CAAtD,EAA/B;AACAJ,WAAO,KAAP;AACD;;AAED,QAAMK,UAAU,MAAM,wCACH,GAAEC,gBAAMC,IAAN,CAAWC,GAAX,CAAe,uBAAf,CAAwC,IAAGF,gBAAME,GAAN,CAAUjB,OAAOkB,QAAjB,CAA2B,EAD3F;AAEA,SAAO;AACLJ,WADK;AAELL;AAFK,GAAP;AAID,CA1BD;;AA4BA,MAAMU,aAAa,CAACC,KAAD,EAAQnB,SAAR,KAAsB;AACvC,QAAMC,gBAAgBD,SAAtB;AACAE,SAAOC,QAAP,CAAgBF,aAAhB,EAA+B;AAC7BG,eAAWH,cAAcA,aAAd,CAA4BG,SAA5B,CAAsCC,GAAtC,CACTJ,cAAcK,eADL,EAET,CAACL,cAAcA,aAAd,CAA4BG,SAA5B,CAAsCG,GAAtC,CAA0CN,cAAcK,eAAxD,KAA4E,CAA7E,IAAkF,CAFzE;AADkB,GAA/B;;AAOA,QAAMO,UAAU,MAAM,+BACH,GAAEC,gBAAMC,IAAN,CAAWC,GAAX,CAAe,QAAf,CAAyB,IAAGF,gBAAME,GAAN,CAAUG,KAAV,CAAiB,EADlE;AAEA,SAAO;AACLN,WADK;AAELL,UAAM;AAFD,GAAP;AAID,CAfD;;kBAiBe,EAAEV,oBAAF,EAAwBoB,UAAxB,E","file":"jestMatchers.js","sourcesContent":["import chalk from 'chalk';\r\n\r\nconst toMatchImageSnapshot = (result, testState) => {\r\n  const snapshotState = testState;\r\n  expect.setState(snapshotState, {\r\n    _counters: snapshotState.snapshotState._counters.set(\r\n      snapshotState.currentTestName,\r\n      (snapshotState.snapshotState._counters.get(snapshotState.currentTestName) || 0) + 1,\r\n    ),\r\n  });\r\n  let pass = true;\r\n  if (result.updated) {\r\n    expect.setState(snapshotState, { updated: snapshotState.snapshotState.updated += 1 });\r\n  } else if (result.added) {\r\n    expect.setState(snapshotState, { added: snapshotState.snapshotState.added += 1 });\r\n  } else if (result.matched) {\r\n    expect.setState(snapshotState, { matched: snapshotState.snapshotState.matched += 1 });\r\n  } else if (!result.matched) {\r\n    expect.setState(snapshotState, { unmatched: snapshotState.snapshotState.unmatched += 1 });\r\n    pass = false;\r\n  }\r\n\r\n  const message = () => 'Expected image to match snapshot.\\n'\r\n                  + `${chalk.bold.red('See diff for details:')} ${chalk.red(result.diffPath)}`;\r\n  return {\r\n    message,\r\n    pass,\r\n  };\r\n};\r\n\r\nconst toNotError = (error, testState) => {\r\n  const snapshotState = testState;\r\n  expect.setState(snapshotState, {\r\n    _counters: snapshotState.snapshotState._counters.set(\r\n      snapshotState.currentTestName,\r\n      (snapshotState.snapshotState._counters.get(snapshotState.currentTestName) || 0) + 1,\r\n    ),\r\n  });\r\n\r\n  const message = () => 'Failed to run your test.\\n'\r\n                  + `${chalk.bold.red('Cause:')} ${chalk.red(error)}`;\r\n  return {\r\n    message,\r\n    pass: false,\r\n  };\r\n};\r\n\r\nexport default { toMatchImageSnapshot, toNotError };\r\n"]}