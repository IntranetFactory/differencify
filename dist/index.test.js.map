{"version":3,"sources":["../src/index.test.js"],"names":["jest","mock","launch","fn","mockLog","prefix","log","error","enable","warn","differencify","Differencify","describe","afterEach","mockClear","logger","browser","testId","puppeteer","chainProxy","it","browserOptions","args","dumpio","executablePath","undefined","headless","ignoreHTTPSErrors","slowMo","timeout","launchBrowser","expect","toHaveBeenCalledWith","browserWSEndpoint","toHaveBeenCalledTimes","init","process","env","update","chain","Target","debug","mismatchThreshold","saveDifferencifiedImage","saveCurrentImage","imageSnapshotPath","imageSnapshotPathProvided","testName","testNameProvided","isUpdate","close","cleanup","toBeNull"],"mappings":"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","file":"index.test.js","sourcesContent":["import puppeteer from 'puppeteer';\r\nimport chainProxy from './helpers/proxyChain';\r\nimport Differencify from './index';\r\nimport logger from './utils/logger';\r\nimport Target from './target';\r\n\r\njest.mock('./target');\r\njest.mock('./helpers/proxyChain');\r\n\r\njest.mock('puppeteer', () => ({\r\n  launch: jest.fn(),\r\n}));\r\n\r\nconst mockLog = jest.fn();\r\njest.mock('./utils/logger', () => ({\r\n  prefix: jest.fn(() => ({\r\n    log: mockLog,\r\n  })),\r\n  log: jest.fn(),\r\n  error: jest.fn(),\r\n  enable: jest.fn(),\r\n  warn: jest.fn(),\r\n}));\r\n\r\nconst differencify = new Differencify();\r\n\r\ndescribe('Differencify', () => {\r\n  afterEach(() => {\r\n    mockLog.mockClear();\r\n    logger.log.mockClear();\r\n    differencify.browser = null;\r\n    differencify.testId = 0;\r\n    puppeteer.launch.mockClear();\r\n    chainProxy.mockClear();\r\n  });\r\n  it('launchBrowser', async () => {\r\n    const browserOptions = {\r\n      args: [],\r\n      dumpio: false,\r\n      executablePath: undefined,\r\n      headless: true,\r\n      ignoreHTTPSErrors: false,\r\n      slowMo: 0,\r\n      timeout: 30000,\r\n    };\r\n    await differencify.launchBrowser(browserOptions);\r\n    expect(puppeteer.launch).toHaveBeenCalledWith(browserOptions);\r\n    await differencify.launch(browserOptions);\r\n    expect(puppeteer.launch).toHaveBeenCalledWith(browserOptions);\r\n    expect(logger.log).toHaveBeenCalledWith('Launching browser...');\r\n  });\r\n  it('connect', async () => {\r\n    const browserOptions = {\r\n      browserWSEndpoint: 'endpoint',\r\n      ignoreHTTPSErrors: false,\r\n    };\r\n    await differencify.launchBrowser(browserOptions);\r\n    expect(puppeteer.launch).toHaveBeenCalledWith(browserOptions);\r\n    await differencify.launch(browserOptions);\r\n    expect(puppeteer.launch).toHaveBeenCalledWith(browserOptions);\r\n    expect(logger.log).toHaveBeenCalledWith('Launching browser...');\r\n  });\r\n  it('does not relaunch browser if one browser instance exists', async () => {\r\n    differencify.browser = true;\r\n    await differencify.launchBrowser();\r\n    expect(puppeteer.launch).toHaveBeenCalledTimes(0);\r\n    expect(logger.log).toHaveBeenCalledWith('Using existing browser instance');\r\n  });\r\n  it('init', async () => {\r\n    await differencify.init();\r\n    expect(chainProxy).toHaveBeenCalledTimes(1);\r\n  });\r\n  it('init without chaining', async () => {\r\n    process.env.update = true;\r\n    await differencify.init({ chain: false });\r\n    expect(Target).toHaveBeenCalledWith(null,\r\n      {\r\n        debug: false,\r\n        mismatchThreshold: 0.001,\r\n        saveDifferencifiedImage: true,\r\n        saveCurrentImage: true,\r\n        imageSnapshotPath: 'differencify_reports',\r\n        imageSnapshotPathProvided: false,\r\n      },\r\n      {\r\n        chain: false,\r\n        testName: 'test',\r\n        testNameProvided: false,\r\n        isUpdate: 'true',\r\n        testId: 1,\r\n      });\r\n    expect(chainProxy).toHaveBeenCalledTimes(1);\r\n    expect(logger.warn).toHaveBeenCalledWith('Your tests are running on update mode. Test screenshots will be updated');\r\n    delete process.env.update;\r\n  });\r\n  describe('Cleanup fn', () => {\r\n    it('closes browser instance', async () => {\r\n      const close = jest.fn();\r\n      differencify.browser = {\r\n        close,\r\n      };\r\n      await differencify.cleanup();\r\n      expect(close).toHaveBeenCalledTimes(1);\r\n      expect(logger.log).toHaveBeenCalledWith('Closing browser...');\r\n    });\r\n    it('will not close if there is no browser instance', async () => {\r\n      differencify.init();\r\n      await differencify.cleanup();\r\n      expect(differencify.browser).toBeNull();\r\n      expect(logger.log).toHaveBeenCalledWith('Closing browser...');\r\n    });\r\n  });\r\n});\r\n"]}