{"version":3,"sources":["../src/compareImage.test.js"],"names":["jest","mock","read","fn","distance","diff","mkdirSync","existsSync","writeFileSync","unlinkSync","dirname","join","a","b","resolve","sync","mockLog","mockError","mockTrace","prefix","log","error","trace","mockConfig","imageSnapshotPath","imageSnapshotPathProvided","saveDifferencifiedImage","saveCurrentImage","mismatchThreshold","mockTestConfig","isUpdate","isJest","testName","testPath","imageType","describe","beforeEach","fs","mockClear","Jimp","mockReturnValue","percent","it","result","Object","expect","toEqual","added","toHaveBeenCalledWith","updated","newGlobalConfig","assign","assertions","mockReturnValueOnce","Promise","reject","Error","matched","diffPercent","snapshotPath","config","image","write","path","cb","diffPath","mockWrite","any","Function"],"mappings":";;AACA;;;;AACA;;;;AACA;;;;;;AAEAA,KAAKC,IAAL,CAAU,MAAV,EAAkB,OAAO;AACvBC,QAAMF,KAAKG,EAAL,EADiB;AAEvBC,YAAUJ,KAAKG,EAAL,EAFa;AAGvBE,QAAML,KAAKG,EAAL;AAHiB,CAAP,CAAlB,E,CALA;;;AAWAH,KAAKC,IAAL,CAAU,IAAV,EAAgB,OAAO;AACrBK,aAAWN,KAAKG,EAAL,EADU;AAErBI,cAAYP,KAAKG,EAAL,EAFS;AAGrBK,iBAAeR,KAAKG,EAAL,EAHM;AAIrBM,cAAYT,KAAKG,EAAL;AAJS,CAAP,CAAhB;;AAOAH,KAAKC,IAAL,CAAU,MAAV,EAAkB,OAAO;AACvBS,WAASV,KAAKG,EAAL,CAAQ,MAAM,SAAd,CADc;AAEvBQ,QAAMX,KAAKG,EAAL,CAAQ,CAACS,CAAD,EAAIC,CAAJ,KAAW,GAAED,CAAE,IAAGC,CAAE,EAA5B,CAFiB;AAGvBC,WAASd,KAAKG,EAAL,CAAQ,CAACS,CAAD,EAAIC,CAAJ,KAAW,GAAED,CAAE,GAAEC,KAAK,EAAG,EAAjC;AAHc,CAAP,CAAlB;;AAMAb,KAAKC,IAAL,CAAU,SAAV,EAAqB,OAAO;AAC1Bc,QAAM,MAAM;AADc,CAAP,CAArB;;AAIA,MAAMC,UAAUhB,KAAKG,EAAL,EAAhB;AACA,MAAMc,YAAYjB,KAAKG,EAAL,EAAlB;AACA,MAAMe,YAAYlB,KAAKG,EAAL,EAAlB;AACAH,KAAKC,IAAL,CAAU,gBAAV,EAA4B,OAAO;AACjCkB,UAAQnB,KAAKG,EAAL,CAAQ,OAAO;AACrBiB,SAAKJ,OADgB;AAErBK,WAAOJ,SAFc;AAGrBK,WAAOJ;AAHc,GAAP,CAAR;AADyB,CAAP,CAA5B;;AAQA,MAAMK,aAAa;AACjBC,qBAAmB,uBADF;AAEjBC,6BAA2B,KAFV;AAGjBC,2BAAyB,IAHR;AAIjBC,oBAAkB,IAJD;AAKjBC,qBAAmB;AALF,CAAnB;;AAQA,MAAMC,iBAAiB;AACrBC,YAAU,KADW;AAErBC,UAAQ,IAFa;AAGrBC,YAAU,MAHW;AAIrBC,YAAU,cAJW;AAKrBC,aAAW;AALU,CAAvB;;AAQAC,SAAS,eAAT,EAA0B,MAAM;AAC9BC,aAAW,MAAM;AACfC,iBAAG7B,aAAH,CAAiB8B,SAAjB;AACAD,iBAAG9B,UAAH,CAAc+B,SAAd;AACAC,mBAAKnC,QAAL,CAAcoC,eAAd,CAA8B,CAA9B;AACAD,mBAAKlC,IAAL,CAAUmC,eAAV,CAA0B,EAAEC,SAAS,CAAX,EAA1B;AACD,GALD;AAMAN,WAAS,WAAT,EAAsB,MAAM;AAC1BO,OAAG,uDAAH,EAA4D,YAAY;AACtE,YAAMC,SAAS,MAAM,4BAAaC,MAAb,EAAqBrB,UAArB,EAAiC;AACpDO,kBAAU,KAD0C;AAEpDC,gBAAQ,IAF4C;AAGpDC,kBAAU,MAH0C;AAIpDC,kBAAU,cAJ0C;AAKpDC,mBAAW;AALyC,OAAjC,CAArB;AAOAW,aAAOF,MAAP,EAAeG,OAAf,CAAuB,EAAEC,OAAO,IAAT,EAAvB;AACAF,aAAOR,aAAG7B,aAAV,EAAyBwC,oBAAzB,CAA8C,2CAA9C,EAA2FJ,MAA3F;AACD,KAVD;AAWAF,OAAG,0CAAH,EAA+C,YAAY;AACzD,YAAMC,SAAS,MAAM,4BAAaC,MAAb,EAAqBrB,UAArB,EAAiC;AACpDO,kBAAU,IAD0C;AAEpDC,gBAAQ,IAF4C;AAGpDC,kBAAU,MAH0C;AAIpDC,kBAAU,cAJ0C;AAKpDC,mBAAW;AALyC,OAAjC,CAArB;AAOAW,aAAOF,MAAP,EAAeG,OAAf,CAAuB,EAAEG,SAAS,IAAX,EAAvB;AACAJ,aAAOR,aAAG7B,aAAV,EAAyBwC,oBAAzB,CAA8C,2CAA9C,EAA2FJ,MAA3F;AACD,KAVD;AAWAF,OAAG,iDAAH,EAAsD,YAAY;AAChE,YAAMQ,kBAAkBN,OAAOO,MAAP,CAAc,EAAd,EAAkB5B,UAAlB,EACtB;AACEC,2BAAmB,iBADrB;AAEEC,mCAA2B;AAF7B,OADsB,CAAxB;AAKA,YAAMkB,SAAS,MAAM,4BAAaC,MAAb,EAAqBM,eAArB,EAAsC;AACzDpB,kBAAU,IAD+C;AAEzDC,gBAAQ,IAFiD;AAGzDC,kBAAU,MAH+C;AAIzDC,kBAAU,cAJ+C;AAKzDC,mBAAW;AAL8C,OAAtC,CAArB;AAOAW,aAAOF,MAAP,EAAeG,OAAf,CAAuB,EAAEG,SAAS,IAAX,EAAvB;AACAJ,aAAOR,aAAG7B,aAAV,EAAyBwC,oBAAzB,CAA8C,+BAA9C,EAA+EJ,MAA/E;AACD,KAfD;AAgBD,GAvCD;;AAyCAT,WAAS,eAAT,EAA0B,MAAM;AAC9BO,OAAG,uDAAH,EAA4D,YAAY;AACtE,YAAMC,SAAS,MAAM,4BAAaC,MAAb,EAAqBrB,UAArB,EAAiC;AACpDO,kBAAU,KAD0C;AAEpDC,gBAAQ,KAF4C;AAGpDC,kBAAU,MAH0C;AAIpDE,mBAAW;AAJyC,OAAjC,CAArB;AAMAW,aAAOF,MAAP,EAAeG,OAAf,CAAuB,EAAEC,OAAO,IAAT,EAAvB;AACAF,aAAOR,aAAG7B,aAAV,EACGwC,oBADH,CAEI,yDAFJ,EAGIJ,MAHJ;AAKD,KAbD;AAcAF,OAAG,0CAAH,EAA+C,YAAY;AACzD,YAAMC,SAAS,MAAM,4BAAaC,MAAb,EAAqBrB,UAArB,EAAiC;AACpDO,kBAAU,IAD0C;AAEpDC,gBAAQ,KAF4C;AAGpDC,kBAAU,MAH0C;AAIpDE,mBAAW;AAJyC,OAAjC,CAArB;AAMAW,aAAOF,MAAP,EAAeG,OAAf,CAAuB,EAAEG,SAAS,IAAX,EAAvB;AACAJ,aAAOR,aAAG7B,aAAV,EACGwC,oBADH,CAEI,yDAFJ,EAGIJ,MAHJ;AAKD,KAbD;AAcD,GA7BD;;AA+BAF,KAAG,iBAAH,EAAsB,YAAY;AAChC,UAAM,4BAAaE,MAAb,EAAqBrB,UAArB,EAAiC;AACrCS,gBAAU,kBAD2B;AAErCC,gBAAU,cAF2B;AAGrCC,iBAAW;AAH0B,KAAjC,CAAN;AAKAW,WAAOR,aAAG7B,aAAV,EACGwC,oBADH,CAEI,qEAFJ,EAGIJ,MAHJ;AAKD,GAXD;;AAaAF,KAAG,8CAAH,EAAmD,YAAY;AAC7DG,WAAOO,UAAP,CAAkB,CAAlB;AACAb,mBAAKrC,IAAL,CAAUmD,mBAAV,CAA8BC,QAAQC,MAAR,CAAe,IAAIC,KAAJ,CAAU,QAAV,CAAf,CAA9B;AACAnB,iBAAG9B,UAAH,CAAciC,eAAd,CAA8B,IAA9B;AACA,UAAMG,SAAS,MAAM,4BAAaC,MAAb,EAAqBrB,UAArB,EAAiCM,cAAjC,CAArB;AACAgB,WAAOF,MAAP,EAAeG,OAAf,CAAuB;AACrBzB,aAAO,gCADc;AAErBoC,eAAS;AAFY,KAAvB;AAIAZ,WAAO3B,SAAP,EAAkB8B,oBAAlB,CAAuC,IAAIQ,KAAJ,CAAU,QAAV,CAAvC;AACAX,WAAO5B,SAAP,EAAkB+B,oBAAlB,CAAuC,2EAAvC;AACD,GAXD;;AAaAN,KAAG,qDAAH,EAA0D,YAAY;AACpEG,WAAOO,UAAP,CAAkB,CAAlB;AACAf,iBAAG9B,UAAH,CAAc8C,mBAAd,CAAkC,IAAlC;AACA,UAAMV,SAAS,MAAM,4BAAaC,MAAb,EAAqBrB,UAArB,EAAiCM,cAAjC,CAArB;AACAgB,WAAOF,MAAP,EAAeG,OAAf,CAAuB;AACrBY,mBAAa,CADQ;AAErBtD,gBAAU,CAFW;AAGrBqD,eAAS,IAHY;AAIrBE,oBAAc;AAJO,KAAvB;AAMAd,WAAO7B,OAAP,EAAgBgC,oBAAhB,CAAqC,qBAArC;AACD,GAXD;;AAaAN,KAAG,uFAAH,EAA4F,YAAY;AACtGG,WAAOO,UAAP,CAAkB,CAAlB;;AAEAf,iBAAG9B,UAAH,CAAc8C,mBAAd,CAAkC,IAAlC;;AAEA,UAAMO,SAAS;AACbrC,gBADa;AAEbK,yBAAmB;AAFN,KAAf;AAIA,UAAMe,SAAS,MAAM,4BAAaC,MAAb,EAAqBgB,MAArB,EAA6B/B,cAA7B,CAArB;;AAEAgB,WAAOF,MAAP,EAAeG,OAAf,CAAuB;AACrBY,mBAAa,CADQ;AAErBtD,gBAAU,CAFW;AAGrBqD,eAAS,IAHY;AAIrBE,oBAAc;AAJO,KAAvB;;AAOAd,WAAO7B,OAAP,EAAgBgC,oBAAhB,CAAqC,qBAArC;AACD,GAnBD;;AAqBAN,KAAG,4DAAH,EAAiE,YAAY;AAC3EH,mBAAKlC,IAAL,CAAUmC,eAAV,CAA0B;AACxBC,eAAS,IADe;AAExBoB,aAAO;AACLC,eAAO9D,KAAKG,EAAL,CAAQ,CAAC4D,IAAD,EAAOC,EAAP,KAAc;AAC3BA;AACD,SAFM;AADF;AAFiB,KAA1B;AAQA3B,iBAAG9B,UAAH,CAAc8C,mBAAd,CAAkC,IAAlC;AACA,UAAMV,SAAS,MAAM,4BAAaC,MAAb,EAAqBrB,UAArB,EAAiCM,cAAjC,CAArB;AACAgB,WAAOF,MAAP,EAAeG,OAAf,CAAuB;AACrBmB,gBAAU,+EADW;AAErBR,eAAS,KAFY;AAGrBC,mBAAa,IAHQ;AAIrBtD,gBAAU,CAJW;AAKrBuD,oBAAc;AALO,KAAvB;AAOAd,WAAO5B,SAAP,EAAkB+B,oBAAlB,CAAwC;;;;;KAAxC;AAMD,GAxBD;;AA0BAN,KAAG,0DAAH,EAA+D,YAAY;AACzEH,mBAAKnC,QAAL,CAAcoC,eAAd,CAA8B,IAA9B;AACAD,mBAAKlC,IAAL,CAAUmC,eAAV,CAA0B;AACxBC,eAAS,CADe;AAExBoB,aAAO;AACLC,eAAO9D,KAAKG,EAAL,CAAQ,CAAC4D,IAAD,EAAOC,EAAP,KAAc;AAC3BA;AACD,SAFM;AADF;AAFiB,KAA1B;AAQA3B,iBAAG9B,UAAH,CAAc8C,mBAAd,CAAkC,IAAlC;AACA,UAAMV,SAAS,MAAM,4BAAaC,MAAb,EAAqBrB,UAArB,EAAiCM,cAAjC,CAArB;AACAgB,WAAOF,MAAP,EAAeG,OAAf,CAAuB;AACrBmB,gBAAU,+EADW;AAErBR,eAAS,KAFY;AAGrBC,mBAAa,CAHQ;AAIrBtD,gBAAU,IAJW;AAKrBuD,oBAAc;AALO,KAAvB;AAOAd,WAAO5B,SAAP,EAAkB+B,oBAAlB,CAAwC;;;;;KAAxC;AAMD,GAzBD;;AA2BAN,KAAG,6DAAH,EAAkE,YAAY;AAC5EH,mBAAKnC,QAAL,CAAcoC,eAAd,CAA8B,IAA9B;AACAD,mBAAKlC,IAAL,CAAUmC,eAAV,CAA0B;AACxBC,eAAS,IADe;AAExBoB,aAAO;AACLC,eAAO9D,KAAKG,EAAL,CAAQ,CAAC4D,IAAD,EAAOC,EAAP,KAAc;AAC3BA;AACD,SAFM;AADF;AAFiB,KAA1B;AAQA3B,iBAAG9B,UAAH,CAAc8C,mBAAd,CAAkC,IAAlC;AACA,UAAMV,SAAS,MAAM,4BAAaC,MAAb,EAAqBrB,UAArB,EAAiCM,cAAjC,CAArB;AACAgB,WAAOF,MAAP,EAAeG,OAAf,CAAuB;AACrBmB,gBAAU,+EADW;AAErBR,eAAS,KAFY;AAGrBC,mBAAa,IAHQ;AAIrBtD,gBAAU,IAJW;AAKrBuD,oBAAc;AALO,KAAvB;AAOAd,WAAO5B,SAAP,EAAkB+B,oBAAlB,CAAwC;;;;;KAAxC;AAMD,GAzBD;;AA2BAN,KAAG,8DAAH,EAAmE,YAAY;AAC7EH,mBAAKnC,QAAL,CAAcoC,eAAd,CAA8B,IAA9B;AACAH,iBAAG9B,UAAH,CAAciC,eAAd,CAA8B,IAA9B;AACA,UAAM0B,YAAYlE,KAAKG,EAAL,CAAQ,CAAC4D,IAAD,EAAOC,EAAP,KAAc;AACtCA;AACD,KAFiB,CAAlB;AAGAzB,mBAAKlC,IAAL,CAAUmC,eAAV,CAA0B;AACxBC,eAAS,IADe;AAExBoB,aAAO;AACLC,eAAOI;AADF;AAFiB,KAA1B;AAMA,UAAMvB,SAAS,MAAM,4BACnBC,MADmB,EAEnBA,OAAOO,MAAP,CAAc,EAAd,EAAkB5B,UAAlB,EAA8B,EAAEG,yBAAyB,IAA3B,EAA9B,CAFmB,EAGnBG,cAHmB,CAArB;AAKAgB,WAAOF,MAAP,EAAeG,OAAf,CAAuB;AACrBmB,gBAAU,+EADW;AAErBR,eAAS,KAFY;AAGrBC,mBAAa,IAHQ;AAIrBtD,gBAAU,IAJW;AAKrBuD,oBAAc;AALO,KAAvB;AAOAd,WAAOqB,SAAP,EACGlB,oBADH,CACwB,+EADxB,EAEIH,OAAOsB,GAAP,CAAWC,QAAX,CAFJ;AAGD,GA3BD;AA4BD,CAvPD","file":"compareImage.test.js","sourcesContent":["/* eslint-disable prefer-object-spread/prefer-object-spread */\r\nimport Jimp from 'jimp';\r\nimport fs from 'fs';\r\nimport compareImage from './compareImage';\r\n\r\njest.mock('jimp', () => ({\r\n  read: jest.fn(),\r\n  distance: jest.fn(),\r\n  diff: jest.fn(),\r\n}));\r\n\r\njest.mock('fs', () => ({\r\n  mkdirSync: jest.fn(),\r\n  existsSync: jest.fn(),\r\n  writeFileSync: jest.fn(),\r\n  unlinkSync: jest.fn(),\r\n}));\r\n\r\njest.mock('path', () => ({\r\n  dirname: jest.fn(() => '/parent'),\r\n  join: jest.fn((a, b) => `${a}/${b}`),\r\n  resolve: jest.fn((a, b) => `${a}${b || ''}`),\r\n}));\r\n\r\njest.mock('pkg-dir', () => ({\r\n  sync: () => '',\r\n}));\r\n\r\nconst mockLog = jest.fn();\r\nconst mockError = jest.fn();\r\nconst mockTrace = jest.fn();\r\njest.mock('./utils/logger', () => ({\r\n  prefix: jest.fn(() => ({\r\n    log: mockLog,\r\n    error: mockError,\r\n    trace: mockTrace,\r\n  })),\r\n}));\r\n\r\nconst mockConfig = {\r\n  imageSnapshotPath: './differencify_report',\r\n  imageSnapshotPathProvided: false,\r\n  saveDifferencifiedImage: true,\r\n  saveCurrentImage: true,\r\n  mismatchThreshold: 0.01,\r\n};\r\n\r\nconst mockTestConfig = {\r\n  isUpdate: false,\r\n  isJest: true,\r\n  testName: 'test',\r\n  testPath: '/src/test.js',\r\n  imageType: 'png',\r\n};\r\n\r\ndescribe('Compare Image', () => {\r\n  beforeEach(() => {\r\n    fs.writeFileSync.mockClear();\r\n    fs.existsSync.mockClear();\r\n    Jimp.distance.mockReturnValue(0);\r\n    Jimp.diff.mockReturnValue({ percent: 0 });\r\n  });\r\n  describe('Jest mode', () => {\r\n    it('ًWill create image snapshot when there is no snapshot', async () => {\r\n      const result = await compareImage(Object, mockConfig, {\r\n        isUpdate: false,\r\n        isJest: true,\r\n        testName: 'test',\r\n        testPath: '/src/test.js',\r\n        imageType: 'png',\r\n      });\r\n      expect(result).toEqual({ added: true });\r\n      expect(fs.writeFileSync).toHaveBeenCalledWith('/parent/__image_snapshots__/test.snap.png', Object);\r\n    });\r\n    it('ًWill update snapshot when isUpdate=true', async () => {\r\n      const result = await compareImage(Object, mockConfig, {\r\n        isUpdate: true,\r\n        isJest: true,\r\n        testName: 'test',\r\n        testPath: '/src/test.js',\r\n        imageType: 'png',\r\n      });\r\n      expect(result).toEqual({ updated: true });\r\n      expect(fs.writeFileSync).toHaveBeenCalledWith('/parent/__image_snapshots__/test.snap.png', Object);\r\n    });\r\n    it('respects to imageSnapshotPath when in jest mode', async () => {\r\n      const newGlobalConfig = Object.assign({}, mockConfig,\r\n        {\r\n          imageSnapshotPath: './someImagePath',\r\n          imageSnapshotPathProvided: true,\r\n        });\r\n      const result = await compareImage(Object, newGlobalConfig, {\r\n        isUpdate: true,\r\n        isJest: true,\r\n        testName: 'test',\r\n        testPath: '/src/test.js',\r\n        imageType: 'png',\r\n      });\r\n      expect(result).toEqual({ updated: true });\r\n      expect(fs.writeFileSync).toHaveBeenCalledWith('./someImagePath/test.snap.png', Object);\r\n    });\r\n  });\r\n\r\n  describe('non-jest mode', () => {\r\n    it('ًWill create image snapshot when there is no snapshot', async () => {\r\n      const result = await compareImage(Object, mockConfig, {\r\n        isUpdate: false,\r\n        isJest: false,\r\n        testName: 'test',\r\n        imageType: 'png',\r\n      });\r\n      expect(result).toEqual({ added: true });\r\n      expect(fs.writeFileSync)\r\n        .toHaveBeenCalledWith(\r\n          './differencify_report/__image_snapshots__/test.snap.png',\r\n          Object,\r\n        );\r\n    });\r\n    it('ًWill update snapshot when isUpdate=true', async () => {\r\n      const result = await compareImage(Object, mockConfig, {\r\n        isUpdate: true,\r\n        isJest: false,\r\n        testName: 'test',\r\n        imageType: 'png',\r\n      });\r\n      expect(result).toEqual({ updated: true });\r\n      expect(fs.writeFileSync)\r\n        .toHaveBeenCalledWith(\r\n          './differencify_report/__image_snapshots__/test.snap.png',\r\n          Object,\r\n        );\r\n    });\r\n  });\r\n\r\n  it('sanitizes paths', async () => {\r\n    await compareImage(Object, mockConfig, {\r\n      testName: 'check /test.html',\r\n      testPath: '/src/test.js',\r\n      imageType: 'png',\r\n    });\r\n    expect(fs.writeFileSync)\r\n      .toHaveBeenCalledWith(\r\n        './differencify_report/__image_snapshots__/check -test.html.snap.png',\r\n        Object,\r\n      );\r\n  });\r\n\r\n  it('throws correct error if it cannot read image', async () => {\r\n    expect.assertions(3);\r\n    Jimp.read.mockReturnValueOnce(Promise.reject(new Error('error1')));\r\n    fs.existsSync.mockReturnValue(true);\r\n    const result = await compareImage(Object, mockConfig, mockTestConfig);\r\n    expect(result).toEqual({\r\n      error: 'failed to read reference image',\r\n      matched: false,\r\n    });\r\n    expect(mockTrace).toHaveBeenCalledWith(new Error('error1'));\r\n    expect(mockError).toHaveBeenCalledWith('failed to read reference image: /parent/__image_snapshots__/test.snap.png');\r\n  });\r\n\r\n  it('returns correct value if difference below threshold', async () => {\r\n    expect.assertions(2);\r\n    fs.existsSync.mockReturnValueOnce(true);\r\n    const result = await compareImage(Object, mockConfig, mockTestConfig);\r\n    expect(result).toEqual({\r\n      diffPercent: 0,\r\n      distance: 0,\r\n      matched: true,\r\n      snapshotPath: '/parent/__image_snapshots__/test.snap.png',\r\n    });\r\n    expect(mockLog).toHaveBeenCalledWith('no mismatch found ✅');\r\n  });\r\n\r\n  it('returns correct value if difference below threshold when the threshold is set to zero', async () => {\r\n    expect.assertions(2);\r\n\r\n    fs.existsSync.mockReturnValueOnce(true);\r\n\r\n    const config = {\r\n      mockConfig,\r\n      mismatchThreshold: 0,\r\n    };\r\n    const result = await compareImage(Object, config, mockTestConfig);\r\n\r\n    expect(result).toEqual({\r\n      diffPercent: 0,\r\n      distance: 0,\r\n      matched: true,\r\n      snapshotPath: '/parent/__image_snapshots__/test.snap.png',\r\n    });\r\n\r\n    expect(mockLog).toHaveBeenCalledWith('no mismatch found ✅');\r\n  });\r\n\r\n  it('returns mismatch found❗ if only difference above threshold', async () => {\r\n    Jimp.diff.mockReturnValue({\r\n      percent: 0.02,\r\n      image: {\r\n        write: jest.fn((path, cb) => {\r\n          cb();\r\n        }),\r\n      },\r\n    });\r\n    fs.existsSync.mockReturnValueOnce(true);\r\n    const result = await compareImage(Object, mockConfig, mockTestConfig);\r\n    expect(result).toEqual({\r\n      diffPath: '/parent/__image_snapshots__/__differencified_output__/test.differencified.png',\r\n      matched: false,\r\n      diffPercent: 0.02,\r\n      distance: 0,\r\n      snapshotPath: '/parent/__image_snapshots__/test.snap.png',\r\n    });\r\n    expect(mockError).toHaveBeenCalledWith(`mismatch found❗\r\n      Result:\r\n        distance: 0\r\n        diff: 0.02\r\n        misMatchThreshold: 0.01\r\n    `);\r\n  });\r\n\r\n  it('returns mismatch found❗ if only distance above threshold', async () => {\r\n    Jimp.distance.mockReturnValue(0.02);\r\n    Jimp.diff.mockReturnValue({\r\n      percent: 0,\r\n      image: {\r\n        write: jest.fn((path, cb) => {\r\n          cb();\r\n        }),\r\n      },\r\n    });\r\n    fs.existsSync.mockReturnValueOnce(true);\r\n    const result = await compareImage(Object, mockConfig, mockTestConfig);\r\n    expect(result).toEqual({\r\n      diffPath: '/parent/__image_snapshots__/__differencified_output__/test.differencified.png',\r\n      matched: false,\r\n      diffPercent: 0,\r\n      distance: 0.02,\r\n      snapshotPath: '/parent/__image_snapshots__/test.snap.png',\r\n    });\r\n    expect(mockError).toHaveBeenCalledWith(`mismatch found❗\r\n      Result:\r\n        distance: 0.02\r\n        diff: 0\r\n        misMatchThreshold: 0.01\r\n    `);\r\n  });\r\n\r\n  it('throws error if distance and difference are above threshold', async () => {\r\n    Jimp.distance.mockReturnValue(0.02);\r\n    Jimp.diff.mockReturnValue({\r\n      percent: 0.02,\r\n      image: {\r\n        write: jest.fn((path, cb) => {\r\n          cb();\r\n        }),\r\n      },\r\n    });\r\n    fs.existsSync.mockReturnValueOnce(true);\r\n    const result = await compareImage(Object, mockConfig, mockTestConfig);\r\n    expect(result).toEqual({\r\n      diffPath: '/parent/__image_snapshots__/__differencified_output__/test.differencified.png',\r\n      matched: false,\r\n      diffPercent: 0.02,\r\n      distance: 0.02,\r\n      snapshotPath: '/parent/__image_snapshots__/test.snap.png',\r\n    });\r\n    expect(mockError).toHaveBeenCalledWith(`mismatch found❗\r\n      Result:\r\n        distance: 0.02\r\n        diff: 0.02\r\n        misMatchThreshold: 0.01\r\n    `);\r\n  });\r\n\r\n  it('writes to disk diff image if saveDifferencifiedImage is true', async () => {\r\n    Jimp.distance.mockReturnValue(0.02);\r\n    fs.existsSync.mockReturnValue(true);\r\n    const mockWrite = jest.fn((path, cb) => {\r\n      cb();\r\n    });\r\n    Jimp.diff.mockReturnValue({\r\n      percent: 0.02,\r\n      image: {\r\n        write: mockWrite,\r\n      },\r\n    });\r\n    const result = await compareImage(\r\n      Object,\r\n      Object.assign({}, mockConfig, { saveDifferencifiedImage: true }),\r\n      mockTestConfig,\r\n    );\r\n    expect(result).toEqual({\r\n      diffPath: '/parent/__image_snapshots__/__differencified_output__/test.differencified.png',\r\n      matched: false,\r\n      diffPercent: 0.02,\r\n      distance: 0.02,\r\n      snapshotPath: '/parent/__image_snapshots__/test.snap.png',\r\n    });\r\n    expect(mockWrite)\r\n      .toHaveBeenCalledWith('/parent/__image_snapshots__/__differencified_output__/test.differencified.png',\r\n        expect.any(Function));\r\n  });\r\n});\r\n"]}