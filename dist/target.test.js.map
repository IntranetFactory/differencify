{"version":3,"sources":["../src/target.test.js"],"names":["mockMatcher","jest","fn","message","pass","jestMatchers","toNotError","toMatchImageSnapshot","mock","mockKeyboard","press","pageMocks","goto","click","screenshot","waitFor","evaluate","setViewport","keyboard","mockNewPage","launch","newPage","connect","join","resolve","a","b","c","d","arg","Promise","reject","screenshots","Error","mockLog","mockTrace","mockErr","prefix","log","error","trace","warn","browser","puppeteer","target","Target","testConfig","globalConfig","describe","afterEach","mockClear","functionToString","compareImage","logger","beforeEach","tab","it","args","dumpio","executablePath","undefined","headless","ignoreHTTPSErrors","slowMo","timeout","expect","toHaveBeenCalledWith","toHaveBeenCalledTimes","newWindow","toEqual","browserWSEndpoint","_handleFunc","result","debug","chain","imageSnapshotPath","imageSnapshotPathProvided","saveDifferencifiedImage","saveCurrentImage","mismatchThreshold","arguments","capture","mockRequests","recorder","replaceImage","allowImageRecourses","any","Object","page","wait","not","toHaveBeenCalled","execute","resize","isJest","toMatchSnapshot","testStats","toBeNull","testName","testId","testNameProvided","_evaluateResult","mockReturnValueOnce","matched","freezeImage"],"mappings":"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","file":"target.test.js","sourcesContent":["import puppeteer from 'puppeteer';\r\nimport recorder from 'mockeer';\r\nimport Target from './target';\r\nimport { globalConfig, testConfig } from './config/defaultConfigs';\r\nimport functionToString from './helpers/functionToString';\r\nimport freezeImage from './freezeImage';\r\nimport { sanitiseGlobalConfiguration } from './sanitiser';\r\nimport jestMatchers from './utils/jestMatchers';\r\nimport compareImage from './compareImage';\r\nimport logger from './utils/logger';\r\n\r\nconst mockMatcher = jest.fn(() => ({\r\n  message: 'message',\r\n  pass: true,\r\n}));\r\n\r\njestMatchers.toNotError = mockMatcher;\r\njestMatchers.toMatchImageSnapshot = mockMatcher;\r\n\r\njest.mock('./compareImage');\r\n\r\nconst mockKeyboard = {\r\n  press: jest.fn(),\r\n};\r\n\r\nconst pageMocks = {\r\n  goto: jest.fn(),\r\n  click: jest.fn(),\r\n  screenshot: jest.fn(),\r\n  waitFor: jest.fn(),\r\n  evaluate: jest.fn(),\r\n  setViewport: jest.fn(),\r\n  keyboard: mockKeyboard,\r\n};\r\n\r\nconst mockNewPage = jest.fn(() => (pageMocks));\r\n\r\njest.mock('puppeteer', () => ({\r\n  launch: jest.fn(() => ({\r\n    newPage: mockNewPage,\r\n  })),\r\n  connect: jest.fn(() => ({\r\n    newPage: mockNewPage,\r\n  })),\r\n}));\r\n\r\njest.mock('path', () => ({\r\n  join: jest.fn(() => '/'),\r\n  resolve: jest.fn((a, b, c, d) => `root${b}${d}`),\r\n}));\r\n\r\njest.mock('mockeer');\r\n\r\njest.mock('./compareImage', () => jest.fn(arg => new Promise((resolve, reject) => {\r\n  if (arg.screenshots === './screenshots') {\r\n    return resolve('Saving the diff image to disk');\r\n  }\r\n  return reject(new Error('error'));\r\n})));\r\n\r\njest.mock('./helpers/functionToString');\r\n\r\nconst mockLog = jest.fn();\r\nconst mockTrace = jest.fn();\r\nconst mockErr = jest.fn();\r\njest.mock('./utils/logger', () => ({\r\n  prefix: jest.fn(() => ({\r\n    log: mockLog,\r\n    error: mockErr,\r\n    trace: mockTrace,\r\n  })),\r\n  warn: jest.fn(),\r\n}));\r\n\r\nconst browser = puppeteer.launch();\r\nconst target = new Target(browser, testConfig, sanitiseGlobalConfiguration(globalConfig));\r\n\r\ndescribe('Target', () => {\r\n  afterEach(() => {\r\n    puppeteer.launch.mockClear();\r\n    mockLog.mockClear();\r\n    mockTrace.mockClear();\r\n    mockErr.mockClear();\r\n    functionToString.mockClear();\r\n    mockMatcher.mockClear();\r\n    compareImage.mockClear();\r\n    target.error = false;\r\n    mockNewPage.mockClear();\r\n    logger.warn.mockClear();\r\n  });\r\n  beforeEach(() => {\r\n    target.tab = target.browser.newPage();\r\n  });\r\n  it('launch fn', async () => {\r\n    target.browser = null;\r\n    await target.launch({\r\n      args: [],\r\n      dumpio: false,\r\n      executablePath: undefined,\r\n      headless: true,\r\n      ignoreHTTPSErrors: false,\r\n      slowMo: 0,\r\n      timeout: 30000,\r\n    });\r\n    expect(mockLog).toHaveBeenCalledWith('Launching browser...');\r\n    expect(puppeteer.launch).toHaveBeenCalledWith({\r\n      args: [],\r\n      dumpio: false,\r\n      executablePath: undefined,\r\n      headless: true,\r\n      ignoreHTTPSErrors: false,\r\n      slowMo: 0,\r\n      timeout: 30000,\r\n    });\r\n    expect(mockNewPage).toHaveBeenCalledTimes(1);\r\n    expect(target.testConfig.newWindow).toEqual(true);\r\n  });\r\n  it('connect fn', async () => {\r\n    target.browser = null;\r\n    await target.connect({\r\n      browserWSEndpoint: 'endpoint',\r\n      ignoreHTTPSErrors: false,\r\n    });\r\n    expect(mockLog).toHaveBeenCalledWith('Launching browser...');\r\n    expect(puppeteer.connect).toHaveBeenCalledWith({\r\n      browserWSEndpoint: 'endpoint',\r\n      ignoreHTTPSErrors: false,\r\n    });\r\n    expect(mockNewPage).toHaveBeenCalledTimes(1);\r\n    expect(target.testConfig.newWindow).toEqual(true);\r\n  });\r\n  describe('_handleFunc', () => {\r\n    beforeEach(() => {\r\n      pageMocks.goto.mockClear();\r\n    });\r\n    it('Wont run if error happened', async () => {\r\n      target.error = true;\r\n      await target._handleFunc('url');\r\n      expect(mockLog).toHaveBeenCalledTimes(0);\r\n    });\r\n    it('will return correct property', async () => {\r\n      target.error = false;\r\n      const result = await target._handleFunc('page', 'testConfig');\r\n      expect(result).toEqual({\r\n        debug: false,\r\n        chain: undefined,\r\n        imageSnapshotPath: 'differencify_reports',\r\n        imageSnapshotPathProvided: true,\r\n        saveDifferencifiedImage: true,\r\n        saveCurrentImage: true,\r\n        mismatchThreshold: 0.001,\r\n        newWindow: true,\r\n      });\r\n      expect(mockLog).toHaveBeenCalledWith('Executing page.testConfig step');\r\n    });\r\n    it('will run goto on page', async () => {\r\n      target.error = false;\r\n      await target.newPage();\r\n      const result = await target._handleFunc('page', 'goto', ['http://example.com', {}]);\r\n      expect(pageMocks.goto).toHaveBeenCalledWith('http://example.com', {});\r\n      expect(result).toEqual();\r\n      expect(mockLog).toHaveBeenCalledWith('Executing page.goto step');\r\n    });\r\n    it('will run press on keyboard', async () => {\r\n      target.error = false;\r\n      await target.newPage();\r\n      const result = await target._handleFunc('keyboard', 'press', arguments); // eslint-disable-line no-undef\r\n      expect(mockKeyboard.press).toHaveBeenCalledWith(...arguments); // eslint-disable-line no-undef\r\n      expect(result).toEqual();\r\n      expect(mockLog).toHaveBeenCalledWith('Executing keyboard.press step');\r\n    });\r\n  });\r\n  describe('capture/screenshot', () => {\r\n    beforeEach(() => {\r\n      pageMocks.screenshot.mockClear();\r\n    });\r\n    it('Wont run if error happened', async () => {\r\n      target.error = true;\r\n      await target.capture();\r\n      await target.screenshot();\r\n      expect(mockLog).toHaveBeenCalledTimes(0);\r\n    });\r\n    it('Will run capture correctly', async () => {\r\n      await target.newPage();\r\n      await target.capture({});\r\n      expect(pageMocks.screenshot).toHaveBeenCalledWith({});\r\n      expect(logger.warn).toHaveBeenCalledWith(`capture() will be deprecated, use screenshot() instead.\r\n          Please read the API docs at https://github.com/NimaSoroush/differencify`);\r\n    });\r\n    it('Will run screenshot correctly', async () => {\r\n      await target.newPage();\r\n      await target.screenshot({});\r\n      expect(pageMocks.screenshot).toHaveBeenCalledWith({});\r\n    });\r\n  });\r\n  describe('mockRequests', () => {\r\n    it('calls Mockeer correctly', async () => {\r\n      await target.mockRequests();\r\n      expect(recorder).toHaveBeenCalledTimes(1);\r\n    });\r\n    it('calls Mockeer correctly with options', async () => {\r\n      await target.mockRequests({\r\n        replaceImage: true,\r\n        allowImageRecourses: false,\r\n      });\r\n      expect(recorder).toHaveBeenCalledWith(expect.any(Object), {\r\n        page: expect.any(Object),\r\n        replaceImage: true,\r\n        allowImageRecourses: false,\r\n      });\r\n    });\r\n  });\r\n  describe('wait', () => {\r\n    beforeEach(() => {\r\n      pageMocks.waitFor.mockClear();\r\n    });\r\n    it('Wont run if error happened', async () => {\r\n      target.error = true;\r\n      await target.newPage();\r\n      await target.wait();\r\n      expect(pageMocks.waitFor).not.toHaveBeenCalled();\r\n    });\r\n    it('Will run wait correctly', async () => {\r\n      await target.newPage();\r\n      await target.wait(10);\r\n      expect(pageMocks.waitFor).toHaveBeenCalledWith(10);\r\n      expect(logger.warn).toHaveBeenCalledWith(`wait() will be deprecated, use waitFor() instead.\r\n          Please read the API docs at https://github.com/NimaSoroush/differencify`);\r\n    });\r\n  });\r\n  describe('execute', () => {\r\n    beforeEach(() => {\r\n      pageMocks.evaluate.mockClear();\r\n    });\r\n    it('Wont run if error happened', async () => {\r\n      target.error = true;\r\n      await target.execute();\r\n      expect(pageMocks.evaluate).not.toHaveBeenCalled();\r\n    });\r\n    it('Will run correctly', async () => {\r\n      await target.newPage();\r\n      await target.execute('exp');\r\n      expect(pageMocks.evaluate).toHaveBeenCalledWith('exp');\r\n      expect(logger.warn).toHaveBeenCalledWith(`execute() will be deprecated, use evaluate() instead.\r\n          Please read the API docs at https://github.com/NimaSoroush/differencify`);\r\n    });\r\n  });\r\n  describe('resize', () => {\r\n    beforeEach(() => {\r\n      pageMocks.setViewport.mockClear();\r\n    });\r\n    it('Wont run if error happened', async () => {\r\n      target.error = true;\r\n      await target.resize();\r\n      expect(pageMocks.setViewport).not.toHaveBeenCalled();\r\n    });\r\n    it('Will run correctly', async () => {\r\n      await target.resize('exp');\r\n      expect(pageMocks.setViewport).toHaveBeenCalledWith('exp');\r\n      expect(logger.warn).toHaveBeenCalledWith(`resize() will be deprecated, use setViewport() instead.\r\n          Please read the API docs at https://github.com/NimaSoroush/differencify`);\r\n    });\r\n  });\r\n  describe('toMatchSnapshot', () => {\r\n    it('will set test to jest mode', async () => {\r\n      target.isJest();\r\n      target.toMatchSnapshot();\r\n      expect(target.testStats).not.toBeNull();\r\n      expect(target.testConfig.testName).toEqual('Target toMatchSnapshot will set test to jest mode');\r\n      expect(target.testId).toEqual(1);\r\n      expect(mockTrace).toHaveBeenCalledTimes(0);\r\n    });\r\n    it('will test name with numbers if several times called', async () => {\r\n      target.testId = 0;\r\n      target.isJest();\r\n      target.toMatchSnapshot();\r\n      target.toMatchSnapshot();\r\n      expect(target.testConfig.isJest).toEqual(true);\r\n      expect(target.testStats).not.toBeNull();\r\n      expect(target.testConfig.testName)\r\n        .toEqual('Target toMatchSnapshot will test name with numbers if several times called 1');\r\n      expect(target.testId).toEqual(2);\r\n      expect(mockErr).toHaveBeenCalledTimes(0);\r\n    });\r\n    it('Will respect to testName if it is provided', async () => {\r\n      target.testId = 0;\r\n      target.testConfig.testName = 'test';\r\n      target.testConfig.testNameProvided = true;\r\n      target.isJest();\r\n      target.toMatchSnapshot();\r\n      expect(target.testConfig.isJest).toEqual(true);\r\n      expect(target.testStats).not.toBeNull();\r\n      expect(target.testConfig.testName)\r\n        .toEqual('test');\r\n      expect(target.testId).toEqual(1);\r\n      expect(mockErr).toHaveBeenCalledTimes(0);\r\n    });\r\n    it('Will respect to testName if it is provided', async () => {\r\n      target.testId = 0;\r\n      target.testConfig.testName = 'test';\r\n      target.testConfig.testNameProvided = true;\r\n      target.isJest();\r\n      target.toMatchSnapshot();\r\n      target.toMatchSnapshot();\r\n      expect(target.testConfig.isJest).toEqual(true);\r\n      expect(target.testStats).not.toBeNull();\r\n      expect(target.testConfig.testName)\r\n        .toEqual('test 1');\r\n      expect(target.testId).toEqual(2);\r\n      expect(mockErr).toHaveBeenCalledTimes(0);\r\n    });\r\n  });\r\n  describe('isJest', () => {\r\n    it('will set test to jest mode', async () => {\r\n      target.isJest();\r\n      expect(target.testConfig.isJest).toEqual(true);\r\n      expect(target.testStats).not.toBeNull();\r\n    });\r\n  });\r\n  describe('_evaluateResult', () => {\r\n    it('it calls toNotError if error happens in any steps when in jest mode', async () => {\r\n      target.error = new Error('Error happened');\r\n      const result = await target._evaluateResult();\r\n      expect(jestMatchers.toNotError).toHaveBeenCalled();\r\n      expect(result).toEqual(false);\r\n    });\r\n    it('it wont calls toMatchImageSnapshot when in jest mode and compareImage throws', async () => {\r\n      const result = await target._evaluateResult();\r\n      expect(compareImage).toHaveBeenCalled();\r\n      expect(jestMatchers.toMatchImageSnapshot).not.toHaveBeenCalled();\r\n      expect(result).toEqual(false);\r\n    });\r\n    it('it calls toMatchImageSnapshot when in jest mode', async () => {\r\n      compareImage.mockReturnValueOnce({ matched: true });\r\n      const result = await target._evaluateResult();\r\n      expect(compareImage).toHaveBeenCalled();\r\n      expect(jestMatchers.toMatchImageSnapshot).toHaveBeenCalled();\r\n      expect(result).toEqual(true);\r\n    });\r\n  });\r\n  describe('FreezeImage', () => {\r\n    beforeEach(() => {\r\n      pageMocks.evaluate.mockClear();\r\n    });\r\n    it('Wont run if error happened', async () => {\r\n      target.error = true;\r\n      await target.freezeImage();\r\n      expect(mockLog).toHaveBeenCalledTimes(0);\r\n    });\r\n    it('Existing selector', async () => {\r\n      pageMocks.evaluate.mockReturnValueOnce(true);\r\n      functionToString.mockReturnValueOnce('return string function');\r\n      await target.freezeImage('selector');\r\n      expect(mockLog).toHaveBeenCalledWith('Freezing image selector in browser');\r\n      expect(mockErr).toHaveBeenCalledTimes(0);\r\n      expect(pageMocks.evaluate).toHaveBeenCalledWith('return string function');\r\n      expect(functionToString).toHaveBeenCalledWith(freezeImage, 'selector');\r\n    });\r\n    it('FreezeImage: non-existing selector', async () => {\r\n      pageMocks.evaluate.mockReturnValueOnce(false);\r\n      functionToString.mockReturnValueOnce('return string function');\r\n      await target.freezeImage('selector');\r\n      expect(mockLog).toHaveBeenCalledWith('Freezing image selector in browser');\r\n      expect(mockTrace).toHaveBeenCalledWith('Unable to freeze image with selector selector');\r\n      expect(pageMocks.evaluate).toHaveBeenCalledWith('return string function');\r\n      expect(functionToString).toHaveBeenCalledWith(freezeImage, 'selector');\r\n    });\r\n  });\r\n});\r\n"]}