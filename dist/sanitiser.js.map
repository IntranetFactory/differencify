{"version":3,"sources":["../src/sanitiser.js"],"names":["logError","name","wrongType","correctType","logger","error","checkProperty","obj","property","checkType","hasProperty","Object","prototype","hasOwnProperty","call","check","sanitiseTestConfiguration","conf","testId","configuration","chain","testConfig","testNameProvided","testName","isUpdate","process","env","update","sanitiseGlobalConfiguration","debug","globalConfig","imageSnapshotPathProvided","imageSnapshotPath","saveDifferencifiedImage","saveCurrentImage","mismatchThreshold"],"mappings":";;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AAEA,MAAMA,WAAW,CAACC,IAAD,EAAOC,SAAP,EAAkBC,WAAlB,KAAkCC,iBAAOC,KAAP,CAChD,oBAAmBJ,IAAK,cAAaC,SAAU,oCAAmCC,WAAY,EAD9C,CAAnD;;AAIA,MAAMG,gBAAgB,CAACC,GAAD,EAAMC,QAAN,EAAgBC,SAAhB,KAA8B;AAClD,MAAI,CAACF,GAAL,EAAU;AACR,WAAO,KAAP;AACD;AACD,QAAMG,cAAcC,OAAOC,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCP,GAArC,EAA0CC,QAA1C,CAApB;AACA,MAAI,CAACO,qBAAMN,SAAN,EAAiBF,IAAIC,QAAJ,CAAjB,CAAD,IAAoCE,WAAxC,EAAqD;AACnDV,aAASQ,QAAT,EAAmB,0BAAKD,IAAIC,QAAJ,CAAL,CAAnB,EAAwCC,SAAxC;AACA,WAAO,KAAP;AACD;AACD,SAAOC,WAAP;AACD,CAVD;;AAYA,MAAMM,4BAA4B,CAACC,IAAD,EAAOC,MAAP,KAAkB;AAClD,QAAMC,gBAAgB,EAAtB;AACAA,gBAAcC,KAAd,GAAsBd,cAAcW,IAAd,EAAoB,OAApB,EAA6B,SAA7B,IAClBA,KAAKG,KADa,GAElBC,2BAAWD,KAFf;AAGAD,gBAAcG,gBAAd,GAAiChB,cAAcW,IAAd,EAAoB,UAApB,EAAgC,QAAhC,CAAjC;AACAE,gBAAcI,QAAd,GAAyBJ,cAAcG,gBAAd,GACrBL,KAAKM,QADgB,GAErBF,2BAAWE,QAFf;AAGAJ,gBAAcD,MAAd,GAAuBA,MAAvB;AACAC,gBAAcK,QAAd,GAA0BC,QAAQC,GAAR,CAAYC,MAAZ,IAAsBF,QAAQC,GAAR,CAAYC,MAAZ,KAAuB,MAA9C,GACrBF,QAAQC,GAAR,CAAYC,MADS,GAErBN,2BAAWG,QAFf;AAGA,SAAOL,aAAP;AACD,CAdD;;AAgBA,MAAMS,8BAA+BX,IAAD,IAAU;AAC5C,QAAME,gBAAgB,EAAtB;AACAA,gBAAcU,KAAd,GAAsBvB,cAAcW,IAAd,EAAoB,OAApB,EAA6B,SAA7B,IAClBA,KAAKY,KADa,GAElBC,6BAAaD,KAFjB;;AAIAV,gBAAcY,yBAAd,GAA0CzB,cAAcW,IAAd,EAAoB,mBAApB,EAAyC,QAAzC,CAA1C;AACAE,gBAAca,iBAAd,GAAkCb,cAAcY,yBAAd,GAC9Bd,KAAKe,iBADyB,GAE9BF,6BAAaE,iBAFjB;AAGAb,gBAAcc,uBAAd,GAAwC3B,cAAcW,IAAd,EAAoB,yBAApB,EAA+C,SAA/C,IACpCA,KAAKgB,uBAD+B,GAEpCH,6BAAaG,uBAFjB;AAGAd,gBAAce,gBAAd,GAAiC5B,cAAcW,IAAd,EAAoB,kBAApB,EAAwC,SAAxC,IAC7BA,KAAKiB,gBADwB,GAE7BJ,6BAAaI,gBAFjB;AAGAf,gBAAcgB,iBAAd,GAAkC7B,cAAcW,IAAd,EAAoB,mBAApB,EAAyC,QAAzC,IAC9BA,KAAKkB,iBADyB,GAE9BL,6BAAaK,iBAFjB;;AAIA,SAAOhB,aAAP;AACD,CArBD;;QAuBSH,yB,GAAAA,yB;QAA2BY,2B,GAAAA,2B","file":"sanitiser.js","sourcesContent":["import check from 'check-types';\r\nimport type from 'type-detect';\r\nimport logger from './utils/logger';\r\nimport { globalConfig, testConfig } from './config/defaultConfigs';\r\n\r\nconst logError = (name, wrongType, correctType) => logger.error(\r\n  `Invalid argument ${name} with type ${wrongType} been passed. Argument should be ${correctType}`,\r\n);\r\n\r\nconst checkProperty = (obj, property, checkType) => {\r\n  if (!obj) {\r\n    return false;\r\n  }\r\n  const hasProperty = Object.prototype.hasOwnProperty.call(obj, property);\r\n  if (!check[checkType](obj[property]) && hasProperty) {\r\n    logError(property, type(obj[property]), checkType);\r\n    return false;\r\n  }\r\n  return hasProperty;\r\n};\r\n\r\nconst sanitiseTestConfiguration = (conf, testId) => {\r\n  const configuration = {};\r\n  configuration.chain = checkProperty(conf, 'chain', 'boolean')\r\n    ? conf.chain\r\n    : testConfig.chain;\r\n  configuration.testNameProvided = checkProperty(conf, 'testName', 'string');\r\n  configuration.testName = configuration.testNameProvided\r\n    ? conf.testName\r\n    : testConfig.testName;\r\n  configuration.testId = testId;\r\n  configuration.isUpdate = (process.env.update && process.env.update === 'true')\r\n    ? process.env.update\r\n    : testConfig.isUpdate;\r\n  return configuration;\r\n};\r\n\r\nconst sanitiseGlobalConfiguration = (conf) => {\r\n  const configuration = {};\r\n  configuration.debug = checkProperty(conf, 'debug', 'boolean')\r\n    ? conf.debug\r\n    : globalConfig.debug;\r\n\r\n  configuration.imageSnapshotPathProvided = checkProperty(conf, 'imageSnapshotPath', 'string');\r\n  configuration.imageSnapshotPath = configuration.imageSnapshotPathProvided\r\n    ? conf.imageSnapshotPath\r\n    : globalConfig.imageSnapshotPath;\r\n  configuration.saveDifferencifiedImage = checkProperty(conf, 'saveDifferencifiedImage', 'boolean')\r\n    ? conf.saveDifferencifiedImage\r\n    : globalConfig.saveDifferencifiedImage;\r\n  configuration.saveCurrentImage = checkProperty(conf, 'saveCurrentImage', 'boolean')\r\n    ? conf.saveCurrentImage\r\n    : globalConfig.saveCurrentImage;\r\n  configuration.mismatchThreshold = checkProperty(conf, 'mismatchThreshold', 'number')\r\n    ? conf.mismatchThreshold\r\n    : globalConfig.mismatchThreshold;\r\n\r\n  return configuration;\r\n};\r\n\r\nexport { sanitiseTestConfiguration, sanitiseGlobalConfiguration };\r\n"]}